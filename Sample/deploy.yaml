AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a container to Fargate with private NLB, Auto Scaling, RDS in a VPC with private subnets, necessary security groups, a NAT Gateway, and Secrets Manager for database credentials. Includes a bastion host accessible via SSM.

Parameters:
  Environment:
    Type: String
    Default: Production
    AllowedValues:
      - Production
    Description: The environment to deploy

  DBPassword:
    Type: String
    NoEcho: true
    Description: The database admin account password
    MinLength: '8'
    ConstraintDescription: must be at least 8 characters

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ODataVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ODataInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      SubnetId: !Ref PublicSubnet
      AllocationId: !GetAtt EIP.AllocationId

  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  PrivateRoute1ToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateRoute2ToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  VPCSecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCSecretsManagerEndpointSG

  VPCSecretsManagerEndpointSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: VPC Endpoint Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  ECSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Cluster Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5024
          ToPort: 5024
          SourceSecurityGroupId: !Ref LoadBalancerSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: NLB Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: RDS Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref ECSClusterSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Bastion Host Security Group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  BastionHostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: SSMPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:SendCommand
                  - ssm:ListCommands
                  - ssm:DescribeInstanceInformation
                  - ssm:GetCommandInvocation
                  - ssm:ListCommandInvocations
                Resource: "*"
        - PolicyName: SecretsManagerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: "*"

  BastionHostInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BastionHostRole

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-0b72821e2f351e396
      IamInstanceProfile: !Ref BastionHostInstanceProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: false
          DeviceIndex: '0'
          GroupSet:
            - !Ref BastionSecurityGroup
          SubnetId: !Ref PrivateSubnet1
      Tags:
        - Key: Name
          Value: BastionHost
    Metadata:
      AWS::CloudFormation::Init:
        config:
          packages:
            yum:
              amazon-ssm-agent: []
          services:
            sysvinit:
              amazon-ssm-agent:
                enabled: true
                ensureRunning: true

  RDSMySQL:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: '5'
      DBInstanceClass: db.t3.micro
      DBInstanceIdentifier: db
      Engine: mysql
      EngineVersion: 8.0.33
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBName: test
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref DBSubnetGroup
      PubliclyAccessible: false
      MultiAZ: false
      DeletionProtection: false
    DeletionPolicy: Delete

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for RDS instance"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  ECS:
    Type: AWS::ECS::Cluster

  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECSServicePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecs:CreateCluster
                  - ecs:DeregisterContainerInstance
                  - ecs:DiscoverPollEndpoint
                  - ecs:Poll
                  - ecs:RegisterContainerInstance
                  - ecs:StartTelemetrySession
                  - ecs:Submit*
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:Describe*
                  - ec2:RevokeSecurityGroupIngress
                  - elasticloadbalancing:DeregisterInstancesFromLoadBalancer
                  - elasticloadbalancing:Describe*
                  - elasticloadbalancing:RegisterInstancesWithLoadBalancer
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: "*"



  SecretsManagerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: SecretsManagerPolicy
      Roles: 
        - !Ref ECSServiceRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
            Resource: !Sub arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:Sample/Production/DB/Connection-*

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECSExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:GetAuthorizationToken
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: "*"


  SampleTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: odata-sample
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: odata-app-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/odata-sample:latest"
          Essential: true
          PortMappings:
            - ContainerPort: 5024
          Environment:
            - Name: ASPNETCORE_ENVIRONMENT
              Value: !Ref Environment
            - Name: AWS_REGION
              Value: !Ref "AWS::Region"
            - Name: SECRETS_MANAGER_SECRET_NAME
              Value: "Sample/Production/DB/Connection"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/odata-sample
              awslogs-region: us-east-1
              awslogs-stream-prefix: odata
      RequiresCompatibilities:
        - FARGATE
      Cpu: '256'
      Memory: '512'
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSServiceRole.Arn
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
    DependsOn: 
      - SecretsManagerPolicy
      - ECSExecutionRole
      - ECSServiceRole

  SampleLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/odata-sample
      RetentionInDays: 7

  ODataTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: odata-target-group
      TargetType: ip
      Port: 5024
      Protocol: TCP
      VpcId: !Ref VPC
      HealthCheckProtocol: TCP
      HealthCheckPort: 5024
      HealthCheckIntervalSeconds: 120
      HealthCheckTimeoutSeconds: 30
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  NLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: odata-nlb
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Scheme: internal
      Type: network

  ODataListenerTCP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ODataTargetGroup
      LoadBalancerArn: !Ref NLB
      Port: 80
      Protocol: TCP

  SampleService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECS
      DesiredCount: 1
      LaunchType: FARGATE
      TaskDefinition: !Ref SampleTaskDefinition
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSClusterSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: odata-app-container
          ContainerPort: 5024
          TargetGroupArn: !Ref ODataTargetGroup
    DependsOn: 
      - ODataListenerTCP
      - ECSServiceRole
      - ECSExecutionRole
      - SecretsManagerSecret

  AutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: odata-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50.0
    DependsOn: ECSServiceScalingTarget

  AmazonEC2ContainerServiceAutoscaleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: application-autoscaling.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: ECSAutoScalingPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:DescribeAlarms
                  - cloudwatch:PutMetricAlarm
                  - cloudwatch:DeleteAlarms
                  - ecs:UpdateService
                  - ecs:DescribeServices
                Resource: '*'

  ECSServiceScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 1
      ResourceId: !Join
        - ''
        - - service/
          - !Ref ECS
          - /
          - !Ref SampleService
      RoleARN: !GetAtt AmazonEC2ContainerServiceAutoscaleRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
    DependsOn: AmazonEC2ContainerServiceAutoscaleRole

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: odata-api
      Description: OData API Gateway
      EndpointConfiguration:
        Types:
          - PRIVATE

  ApiGatewayVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.execute-api"
      VpcId: !Ref VPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref VPCSecretsManagerEndpointSG

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: odata
      RestApiId: !Ref ApiGatewayRestApi

  VPCLink:
    Type: AWS::ApiGateway::VpcLink
    Properties:
      Name: ODataVpcLink
      TargetArns:
        - !Ref NLB

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: CUSTOM
      AuthorizerId: !Ref ApiGatewayAuthorizer
      HttpMethod: ANY
      ResourceId: !Ref ApiGatewayResource
      RestApiId: !Ref ApiGatewayRestApi
      Integration:
        ConnectionType: VPC_LINK
        ConnectionId: !Ref VPCLink
        IntegrationHttpMethod: ANY
        Type: HTTP_PROXY
        Uri: !Sub
          - http://${NLB.DNSName}/odata
          - { NLB: !Ref NLB }

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: Authorizer
      Type: TOKEN
      AuthorizerUri: !Sub
        - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${AuthorizerLambda.Arn}/invocations
        - { AuthorizerLambda: !Ref AuthorizerLambda }
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref ApiGatewayRestApi

  AuthorizerLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/*

  AuthorizerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt AuthorizerLambdaRole.Arn
      Runtime: nodejs20.x
      Code:
        ZipFile: |
          exports.handler = async function(event) {
            return {
              principalId: 'user',
              policyDocument: {
                Version: '2012-10-17',
                Statement: [
                  {
                    Action: 'execute-api:Invoke',
                    Effect: 'Allow',
                    Resource: event.methodArn
                  }
                ]
              }
            };
          };

  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AuthorizerLambda
      Principal: apigateway.amazonaws.com

  SecretsManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: Sample/Production/DB/Connection
      Description: "Database connection string"
      SecretString: !Sub '{"Server":"${RDSMySQL.Endpoint.Address}","Database":"test","User":"admin","Password":"${DBPassword}"}'

Outputs:
  VPCId:
    Description: The VPC ID
    Value: !Ref VPC
  PublicSubnetId:
    Description: The public subnet ID
    Value: !Ref PublicSubnet
  PrivateSubnet1Id:
    Description: The first private subnet ID
    Value: !Ref PrivateSubnet1
  PrivateSubnet2Id:
    Description: The second private subnet ID
    Value: !Ref PrivateSubnet2
  RDSInstanceEndpoint:
    Description: The endpoint of the RDS instance
    Value: !GetAtt RDSMySQL.Endpoint.Address
  RDSInstancePort:
    Description: The port of the RDS instance
    Value: !GetAtt RDSMySQL.Endpoint.Port

